use device_query::{Keycode, MouseState};

/// holds all kb and mouse buttons
#[derive(Debug)]
pub enum Button {
    Key0,
    Key1,
    Key2,
    Key3,
    Key4,
    Key5,
    Key6,
    Key7,
    Key8,
    Key9,
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    Escape,
    Space,
    LControl,
    RControl,
    LShift,
    RShift,
    LAlt,
    RAlt,
    Meta,
    Enter,
    Up,
    Down,
    Left,
    Right,
    Backspace,
    CapsLock,
    Tab,
    Home,
    End,
    PageUp,
    PageDown,
    Insert,
    Delete,

    // The following keys have not been tested on MacOS!
    // Numpad keys which have not been implemented: NumpadSeparator NumLock
    Numpad0,
    Numpad1,
    Numpad2,
    Numpad3,
    Numpad4,
    Numpad5,
    Numpad6,
    Numpad7,
    Numpad8,
    Numpad9,
    NumpadSubtract,
    NumpadAdd,
    NumpadDivide,
    NumpadMultiply,

    // The following keys names represent the position of the key in a US keyboard,
    // not the sign value. In a different keyboards and OS, the position can vary.
    Grave,
    Minus,
    Equal,
    LeftBracket,
    RightBracket,
    BackSlash,
    Semicolon,
    Apostrophe,
    Comma,
    Dot,
    Slash,

    Mouse1,
    Mouse2,
    Mouse3,
    Mouse4,
    Mouse5,
}

impl From<Keycode> for Button {
    fn from(key: Keycode) -> Self {
        use Keycode::*;
        match key {
            Key0 => Button::Key0,
            Key1 => Button::Key1,
            Key2 => Button::Key2,
            Key3 => Button::Key3,
            Key4 => Button::Key4,
            Key5 => Button::Key5,
            Key6 => Button::Key6,
            Key7 => Button::Key7,
            Key8 => Button::Key8,
            Key9 => Button::Key9,
            A => Button::A,
            B => Button::B,
            C => Button::C,
            D => Button::D,
            E => Button::E,
            F => Button::F,
            G => Button::G,
            H => Button::H,
            I => Button::I,
            J => Button::J,
            K => Button::K,
            L => Button::L,
            M => Button::M,
            N => Button::N,
            O => Button::O,
            P => Button::P,
            Q => Button::Q,
            R => Button::R,
            S => Button::S,
            T => Button::T,
            U => Button::U,
            V => Button::V,
            W => Button::W,
            X => Button::X,
            Y => Button::Y,
            Z => Button::Z,
            F1 => Button::F1,
            F2 => Button::F2,
            F3 => Button::F3,
            F4 => Button::F4,
            F5 => Button::F5,
            F6 => Button::F6,
            F7 => Button::F7,
            F8 => Button::F8,
            F9 => Button::F9,
            F10 => Button::F10,
            F11 => Button::F11,
            F12 => Button::F12,
            Escape => Button::Escape,
            Space => Button::Space,
            LControl => Button::LControl,
            RControl => Button::RControl,
            LShift => Button::LShift,
            RShift => Button::RShift,
            LAlt => Button::LAlt,
            RAlt => Button::RAlt,
            Meta => Button::Meta,
            Enter => Button::Enter,
            Up => Button::Up,
            Down => Button::Down,
            Left => Button::Left,
            Right => Button::Right,
            Backspace => Button::Backspace,
            CapsLock => Button::CapsLock,
            Tab => Button::Tab,
            Home => Button::Home,
            End => Button::End,
            PageUp => Button::PageUp,
            PageDown => Button::PageDown,
            Insert => Button::Insert,
            Delete => Button::Delete,
            Numpad0 => Button::Numpad0,
            Numpad1 => Button::Numpad1,
            Numpad2 => Button::Numpad2,
            Numpad3 => Button::Numpad3,
            Numpad4 => Button::Numpad4,
            Numpad5 => Button::Numpad5,
            Numpad6 => Button::Numpad6,
            Numpad7 => Button::Numpad7,
            Numpad8 => Button::Numpad8,
            Numpad9 => Button::Numpad9,
            NumpadSubtract => Button::NumpadSubtract,
            NumpadAdd => Button::NumpadAdd,
            NumpadDivide => Button::NumpadDivide,
            NumpadMultiply => Button::NumpadMultiply,
            Grave => Button::Grave,
            Minus => Button::Minus,
            Equal => Button::Equal,
            LeftBracket => Button::LeftBracket,
            RightBracket => Button::RightBracket,
            BackSlash => Button::BackSlash,
            Semicolon => Button::Semicolon,
            Apostrophe => Button::Apostrophe,
            Comma => Button::Comma,
            Dot => Button::Dot,
            Slash => Button::Slash,
        }
    }
}

impl Button {
    pub fn from_mouse(mouse: MouseState) -> Vec<Self> {
        let mut ret = Vec::with_capacity(5);
        if mouse.button_pressed[1] {
            ret.push(Self::Mouse1)
        }
        if mouse.button_pressed[2] {
            ret.push(Self::Mouse2)
        }
        if mouse.button_pressed[3] {
            ret.push(Self::Mouse3)
        }
        if mouse.button_pressed[4] {
            ret.push(Self::Mouse4)
        }
        if mouse.button_pressed[5] {
            ret.push(Self::Mouse5)
        }
        ret
    }
}
